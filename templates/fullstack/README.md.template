# {{projectName}} - Full-Stack Application

{{description}}

A modern full-stack web application built with **{{frontendFramework}}** frontend and **{{backendFramework}}** backend.

## Architecture

```
{{projectName}}/
├── apps/
│   ├── frontend/          # Frontend application ({{frontendFramework}})
│   └── backend/           # Backend API ({{backendFramework}})
├── packages/
│   ├── shared/           # Shared types and utilities
│   └── ui/               # Shared UI components
├── docs/                 # Documentation
├── docker-compose.yml    # Docker setup
└── package.json          # Root package configuration
```

## Quick Start

### Prerequisites

- Node.js {{nodeVersion}} or higher
- npm, yarn, or pnpm
- {{databaseName}} (optional, for backend)

### Installation

1. **Clone the repository:**
   ```bash
   git clone <repository-url>
   cd {{projectName}}
   ```

2. **Install all dependencies:**
   ```bash
   npm run install:all
   ```

3. **Set up environment variables:**
   ```bash
   # Copy environment templates
   cp apps/frontend/.env.example apps/frontend/.env
   cp apps/backend/.env.example apps/backend/.env
   ```

4. **Start development servers:**
   ```bash
   npm run dev
   ```

   This will start:
   - Frontend: http://localhost:{{frontendPort}}
   - Backend: http://localhost:{{backendPort}}

## Available Scripts

### Full-Stack Commands
- `npm run dev` - Start both frontend and backend in development mode
- `npm run build` - Build both applications for production
- `npm run start` - Start both applications in production mode
- `npm run test` - Run tests for both applications
- `npm run lint` - Lint code in both applications
- `npm run format` - Format code in both applications

### Frontend Commands
- `npm run dev:frontend` - Start frontend development server
- `npm run build:frontend` - Build frontend for production
- `npm run test:frontend` - Run frontend tests

### Backend Commands
- `npm run dev:backend` - Start backend development server
- `npm run build:backend` - Build backend for production
- `npm run test:backend` - Run backend tests

## Tech Stack

### Frontend ({{frontendFramework}})
- **Framework**: {{frontendFramework}}
- **Language**: {{language}}
- **Styling**: {{cssFramework}}
- **State Management**: {{stateManagement}}
- **Build Tool**: {{buildTool}}

### Backend ({{backendFramework}})
- **Framework**: {{backendFramework}}
- **Language**: {{language}}
- **Database**: {{databaseName}}
- **Authentication**: JWT
- **API**: RESTful

### Development Tools
- **TypeScript** - Type safety
- **ESLint** - Code linting
- **Prettier** - Code formatting
- **Concurrently** - Run multiple commands
- **Docker** - Containerization

## 📁 Project Structure

### Frontend (`apps/frontend/`)
```
apps/frontend/
├── src/
│   ├── components/        # Reusable UI components
│   ├── pages/            # Application pages
│   ├── hooks/            # Custom React hooks
│   ├── services/         # API service layer
│   ├── store/            # State management
│   ├── styles/           # Global styles
│   └── utils/            # Utility functions
├── public/               # Static assets
├── tests/                # Frontend tests
└── package.json          # Frontend dependencies
```

### Backend (`apps/backend/`)
```
apps/backend/
├── src/
│   ├── controllers/      # Request handlers
│   ├── middleware/       # Express middleware
│   ├── models/          # Database models
│   ├── routes/          # API routes
│   ├── services/        # Business logic
│   ├── utils/           # Utility functions
│   └── config/          # Configuration
├── tests/               # Backend tests
├── migrations/          # Database migrations
└── package.json         # Backend dependencies
```

## Configuration

### Environment Variables

#### Frontend (`.env`)
```env
VITE_API_URL=http://localhost:{{backendPort}}/api
VITE_APP_NAME={{projectName}}
VITE_APP_VERSION=1.0.0
```

#### Backend (`.env`)
```env
NODE_ENV=development
PORT={{backendPort}}
DATABASE_URL={{databaseUrl}}
JWT_SECRET=your-jwt-secret
CORS_ORIGIN=http://localhost:{{frontendPort}}
```

## 🐳 Docker Support

### Development with Docker
```bash
# Start all services
docker-compose up -d

# View logs
docker-compose logs -f

# Stop services
docker-compose down
```

### Production Build
```bash
# Build production images
docker-compose -f docker-compose.prod.yml build

# Start production services
docker-compose -f docker-compose.prod.yml up -d
```

## 🧪 Testing

### Run All Tests
```bash
npm run test
```

### Frontend Testing
```bash
npm run test:frontend
npm run test:frontend:coverage
```

### Backend Testing
```bash
npm run test:backend
npm run test:backend:coverage
```

## 📚 API Documentation

The backend API is documented with Swagger/OpenAPI:
- **Development**: http://localhost:{{backendPort}}/api-docs
- **API Base URL**: http://localhost:{{backendPort}}/api

### Key Endpoints
- `GET /api/health` - Health check
- `POST /api/auth/login` - User authentication
- `GET /api/users` - Get users (protected)
- `POST /api/users` - Create user (protected)

## Deployment

### Frontend Deployment
Deploy to Vercel, Netlify, or any static hosting:
```bash
npm run build:frontend
```

### Backend Deployment
Deploy to Railway, Heroku, or any Node.js hosting:
```bash
npm run build:backend
```

### Full-Stack Deployment
Use Docker for full-stack deployment:
```bash
docker-compose -f docker-compose.prod.yml up -d
```

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Make your changes
4. Run tests (`npm run test`)
5. Commit your changes (`git commit -m 'Add amazing feature'`)
6. Push to the branch (`git push origin feature/amazing-feature`)
7. Open a Pull Request

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- Created with [CREATE IGNITE](https://github.com/kasimkazmi/create-ignite)
- Built with modern full-stack technologies
- Optimized for development and production
