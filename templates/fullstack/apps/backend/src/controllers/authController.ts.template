// Authentication controller
import { Request, Response } from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { User } from '@{{projectName}}/shared';
import { UserModel } from '../models/User';
import { AuthResponse, LoginRequest, RegisterRequest, ApiResponse } from '@{{projectName}}/shared';

export class AuthController {
  /**
   * Register a new user
   */
  async register(req: Request, res: Response): Promise<void> {
    try {
      const { name, email, password }: RegisterRequest = req.body;

      // Check if user already exists
      const existingUser = await UserModel.findOne({ email });
      if (existingUser) {
        res.status(409).json({
          success: false,
          error: 'User already exists with this email',
        } as ApiResponse);
        return;
      }

      // Hash password
      const saltRounds = 12;
      const hashedPassword = await bcrypt.hash(password, saltRounds);

      // Create user
      const user = new UserModel({
        name,
        email,
        password: hashedPassword,
        role: 'user',
      });

      await user.save();

      // Generate tokens
      const tokens = this.generateTokens(user);

      const response: AuthResponse = {
        user: {
          id: user._id.toString(),
          email: user.email,
          name: user.name,
          avatar: user.avatar,
          role: user.role,
          createdAt: user.createdAt,
          updatedAt: user.updatedAt,
        },
        token: tokens.accessToken,
        refreshToken: tokens.refreshToken,
      };

      res.status(201).json({
        success: true,
        data: response,
        message: 'User registered successfully',
      } as ApiResponse<AuthResponse>);
    } catch (error) {
      console.error('Registration error:', error);
      res.status(500).json({
        success: false,
        error: 'Internal server error',
      } as ApiResponse);
    }
  }

  /**
   * Login user
   */
  async login(req: Request, res: Response): Promise<void> {
    try {
      const { email, password }: LoginRequest = req.body;

      // Find user
      const user = await UserModel.findOne({ email });
      if (!user) {
        res.status(401).json({
          success: false,
          error: 'Invalid credentials',
        } as ApiResponse);
        return;
      }

      // Verify password
      const isPasswordValid = await bcrypt.compare(password, user.password);
      if (!isPasswordValid) {
        res.status(401).json({
          success: false,
          error: 'Invalid credentials',
        } as ApiResponse);
        return;
      }

      // Generate tokens
      const tokens = this.generateTokens(user);

      const response: AuthResponse = {
        user: {
          id: user._id.toString(),
          email: user.email,
          name: user.name,
          avatar: user.avatar,
          role: user.role,
          createdAt: user.createdAt,
          updatedAt: user.updatedAt,
        },
        token: tokens.accessToken,
        refreshToken: tokens.refreshToken,
      };

      res.json({
        success: true,
        data: response,
        message: 'Login successful',
      } as ApiResponse<AuthResponse>);
    } catch (error) {
      console.error('Login error:', error);
      res.status(500).json({
        success: false,
        error: 'Internal server error',
      } as ApiResponse);
    }
  }

  /**
   * Refresh access token
   */
  async refreshToken(req: Request, res: Response): Promise<void> {
    try {
      const { refreshToken } = req.body;

      if (!refreshToken) {
        res.status(400).json({
          success: false,
          error: 'Refresh token is required',
        } as ApiResponse);
        return;
      }

      // Verify refresh token
      const decoded = jwt.verify(refreshToken, process.env.JWT_SECRET!) as any;
      const user = await UserModel.findById(decoded.userId);

      if (!user) {
        res.status(401).json({
          success: false,
          error: 'Invalid refresh token',
        } as ApiResponse);
        return;
      }

      // Generate new tokens
      const tokens = this.generateTokens(user);

      const response: AuthResponse = {
        user: {
          id: user._id.toString(),
          email: user.email,
          name: user.name,
          avatar: user.avatar,
          role: user.role,
          createdAt: user.createdAt,
          updatedAt: user.updatedAt,
        },
        token: tokens.accessToken,
        refreshToken: tokens.refreshToken,
      };

      res.json({
        success: true,
        data: response,
        message: 'Token refreshed successfully',
      } as ApiResponse<AuthResponse>);
    } catch (error) {
      console.error('Token refresh error:', error);
      res.status(401).json({
        success: false,
        error: 'Invalid refresh token',
      } as ApiResponse);
    }
  }

  /**
   * Logout user
   */
  async logout(req: Request, res: Response): Promise<void> {
    // In a real application, you might want to blacklist the token
    res.json({
      success: true,
      message: 'Logout successful',
    } as ApiResponse);
  }

  /**
   * Get current user profile
   */
  async getCurrentUser(req: Request, res: Response): Promise<void> {
    try {
      const userId = (req as any).user?.id;
      
      if (!userId) {
        res.status(401).json({
          success: false,
          error: 'User not authenticated',
        } as ApiResponse);
        return;
      }

      const user = await UserModel.findById(userId);
      if (!user) {
        res.status(404).json({
          success: false,
          error: 'User not found',
        } as ApiResponse);
        return;
      }

      const userProfile: User = {
        id: user._id.toString(),
        email: user.email,
        name: user.name,
        avatar: user.avatar,
        role: user.role,
        createdAt: user.createdAt,
        updatedAt: user.updatedAt,
      };

      res.json({
        success: true,
        data: userProfile,
      } as ApiResponse<User>);
    } catch (error) {
      console.error('Get current user error:', error);
      res.status(500).json({
        success: false,
        error: 'Internal server error',
      } as ApiResponse);
    }
  }

  /**
   * Generate access and refresh tokens
   */
  private generateTokens(user: any) {
    const payload = {
      userId: user._id.toString(),
      email: user.email,
      role: user.role,
    };

    const accessToken = jwt.sign(payload, process.env.JWT_SECRET!, {
      expiresIn: process.env.JWT_EXPIRES_IN || '15m',
    });

    const refreshToken = jwt.sign(payload, process.env.JWT_SECRET!, {
      expiresIn: process.env.JWT_REFRESH_EXPIRES_IN || '7d',
    });

    return { accessToken, refreshToken };
  }
}

export const authController = new AuthController();
